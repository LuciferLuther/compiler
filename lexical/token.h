#pragma once
#include <iostream>
using namespace std;
#include <string>
#include<vector>
#include<fstream>
enum types{
AUTO=0,
BREAK,
CASE,
CHAR,
CONST,
CONTINUE,
DEFAULT,
DO,
DOUBLE,
ELSE,
ENUM,
EXTERN,
FLOAT,
FOR,
GOTO,
IF,
INLINE,
INT,
LONG,
REGISTRT,
RESTRICT,
RETURN,
SHORT,
SIGNED,
SIZEOF,
STATIC,
STRUCT,
SWITCH,
TYPEDF,
UNION,
UNSIGNED,
VOID,
VOLATILE,
WHILE,
ALIGNAS,
ALIGNOF,
ATOMIC,
BOOL,
COMPLEX,
GENERIC,
IMAGINARY,
STATIC_ASSERT,
THREAD_LOCAL,
FUNC_NAME,
ELLIPSIS,
RIGHT_ASSIGN,
LEFT_ASSIGN,
ADD_ASSIGN,
SUB_ASSIGN,
MUL_ASSIGN,
DIV_ASSIGN,
MOD_ASSIGN,
AND_ASSIGN,
XOR_ASSIGN,
OR_ASSIGN,
RIGHT_OP,
LEFT_OP,
INC_OP,
DEC_OP,
PTR_OP,
AND_OP,
OR_OP,
LE_OP,
GE_OP,
EQ_OP,
NE_OP,
NORETURN,
IDENTIFIER,
STRING_LITERAL,
I_CONSTANT,
SEMICOLON,
LEFT_CURLY_BRACKET,// {
RIGHT_CURLY_BRACKET,
COMMA,
COLLON,
ASSIMENT,
LEFT_BRACKET,
RIGHT_BRACKET,
LEFT_SQUARE_BRACKET,
RIGHT_SQUARE_BRACKET,
DOT,
AND,
EXCLIMATION,
TELDA,
MINUS,
PLUS,
ASTRICS,
FORWARD_SLASH,
PERCENT,
LESS_THAN,
GREATER_THAN,
POWER,
STICK,
QUISTION_MARK,
};

const vector<string> typenames{
"AUTO",
"BREAK",
"CASE",
"CHAR",
"CONST",
"CONTINUE",
"DEFAULT",
"DO",
"DOUBLE",
"ELSE",
"ENUM",
"EXTERN",
"FLOAT",
"FOR",
"GOTO",
"IF",
"INLINE",
"INT",
"LONG",
"REGISTRT",
"RESTRICT",
"RETURN",
"SHORT",
"SIGNED",
"SIZEOF",
"STATIC",
"STRUCT",
"SWITCH",
"TYPEDF",
"UNION",
"UNSIGNED",
"VOID",
"VOLATILE",
"WHILE",
"ALIGNAS",
"ALIGNOF",
"ATOMIC",
"BOOL",
"COMPLEX",
"GENERIC",
"IMAGINARY",
"STATIC_ASSERT",
"THREAD_LOCAL",
"FUNC_NAME",
"ELLIPSIS",
"RIGHT_ASSIGN",
"LEFT_ASSIGN",
"ADD_ASSIGN",
"SUB_ASSIGN",
"MUL_ASSIGN",
"DIV_ASSIGN",
"MOD_ASSIGN",
"AND_ASSIGN",
"XOR_ASSIGN",
"OR_ASSIGN",
"RIGHT_OP",
"LEFT_OP",
"INC_OP",
"DEC_OP",
"PTR_OP",
"AND_OP",
"OR_OP",
"LE_OP",
"GE_OP",
"EQ_OP",
"NE_OP",
"NORETURN",
"IDENTIFIER",
"STRING_LITERAL",
"I_CONSTANT",
"SEMICOLON",
"LEFT_CURLY_BRACKET",// {
"RIGHT_CURLY_BRACKET",
"COMMA",
"COLLON",
"ASSIMENT",
"LEFT_BRACKET",
"RIGHT_BRACKET",
"LEFT_SQUARE_BRACKET",
"RIGHT_SQUARE_BRACKET",
"DOT",
"AND",
"EXCLIMATION",
"TELDA",
"MINUS",
"PLUS",
"ASTRICS",
"FORWARD_SLASH",
"PERCENT",
"LESS_THAN",
"GREATER_THAN",
"POWER",
"STICK",
"QUISTION_MARK",
};


const vector<string> keys{
"auto",
"break",
"case",
"char",
"const",
"continue",
"default",
"do",
"double",
"else",
"enum",
"extern",
"float",
"for",
"goto",
"if",
"inline",
"int",
"long",
"register",
"restrict",
"return",
"short",
"signed",
"sizeof",
"static",
"struct",
"switch",
"typedef",
"union",
"unsigned",
"void",
"volatile",
"while",
"_Alignas",
"_Alignof",
"_Atomic",
"_Bool",
"_Complex",
"_Generic",
"_Imaginary",
"_Static_assert",
"_Thread_local",
"__func__",
"...",
">>=",
"<<=",
"+=",
"-=",
"*=",
"/=",
"%=",
"&=",
"^=",
"|=",
">>",
"<<",
"++",
"--",
"->",
"&&",
"||",
"<=",
">=",
"==",
"!=",
"_Noreturn"
";",
"{",// {
"}",
",",
":",
"=",
"(",
")",
"[",
"]",
".",
"&",
"!",
"~",
"-",
"+",
"*",
"/",
"%",
"<",
">",
"^",
"|",
"?",
};

class token{
    string s;
    types t;
    int start;
    int len=1;
    int line=1;
public:
    void print(ofstream& f);
    token(string s,types t,int start,int len,int line);
    token(string s,types t,int start, int line);
    void see_its_type();
    bool has_type();
    types give_type();
};